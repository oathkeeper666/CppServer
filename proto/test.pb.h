// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Uqee {
namespace Protobufs {
namespace Peer {
namespace Protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class C2S_KeepAliveReq;
class S2C_KeepAliveAck;

enum RetCode {
  RET_SUCCESS = 0,
  RET_PROTO_ERROR = 1,
  RET_DEPEND = 2,
  RET_NOT_ENOUGH = 3,
  RET_INPUT_ERROR = 4,
  RET_INNER_ERROR = 5,
  RET_EXIST = 6,
  RET_NOT_EXIST = 7,
  RET_PERMIT = 8
};
bool RetCode_IsValid(int value);
const RetCode RetCode_MIN = RET_SUCCESS;
const RetCode RetCode_MAX = RET_PERMIT;
const int RetCode_ARRAYSIZE = RetCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RetCode_descriptor();
inline const ::std::string& RetCode_Name(RetCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RetCode_descriptor(), value);
}
inline bool RetCode_Parse(
    const ::std::string& name, RetCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RetCode>(
    RetCode_descriptor(), name, value);
}
enum ProtocolType {
  C2S_ROOM_BASE = 0,
  C2S_KEEP_ALIVE = 1,
  S2C_KEEP_ALIVE = 2,
  C2S_ALL_ROOMS = 3,
  S2C_ALL_ROOMS = 4,
  C2S_CREATE_ROOM = 101,
  S2C_CREATE_ROOM = 102,
  C2S_UPDATE_FRAME = 103,
  S2C_UPDATE_FRAME = 104,
  C2S_END_ROOM = 105,
  S2C_END_ROOM = 106,
  C2S_READY = 107,
  S2C_READY = 108,
  S2C_FRAME_NOTIFY = 180,
  S2C_END_ROOM_NOTIFY = 181,
  C2S_ROOM_TOP = 200
};
bool ProtocolType_IsValid(int value);
const ProtocolType ProtocolType_MIN = C2S_ROOM_BASE;
const ProtocolType ProtocolType_MAX = C2S_ROOM_TOP;
const int ProtocolType_ARRAYSIZE = ProtocolType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor();
inline const ::std::string& ProtocolType_Name(ProtocolType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtocolType_descriptor(), value);
}
inline bool ProtocolType_Parse(
    const ::std::string& name, ProtocolType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtocolType>(
    ProtocolType_descriptor(), name, value);
}
// ===================================================================

class C2S_KeepAliveReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq) */ {
 public:
  C2S_KeepAliveReq();
  virtual ~C2S_KeepAliveReq();

  C2S_KeepAliveReq(const C2S_KeepAliveReq& from);

  inline C2S_KeepAliveReq& operator=(const C2S_KeepAliveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const C2S_KeepAliveReq& default_instance();

  void Swap(C2S_KeepAliveReq* other);

  // implements Message ----------------------------------------------

  inline C2S_KeepAliveReq* New() const { return New(NULL); }

  C2S_KeepAliveReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const C2S_KeepAliveReq& from);
  void MergeFrom(const C2S_KeepAliveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(C2S_KeepAliveReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = C2S_KEEP_ALIVE];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Uqee::Protobufs::Peer::Protocol::ProtocolType type() const;
  void set_type(::Uqee::Protobufs::Peer::Protocol::ProtocolType value);

  // @@protoc_insertion_point(class_scope:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static C2S_KeepAliveReq* default_instance_;
};
// -------------------------------------------------------------------

class S2C_KeepAliveAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck) */ {
 public:
  S2C_KeepAliveAck();
  virtual ~S2C_KeepAliveAck();

  S2C_KeepAliveAck(const S2C_KeepAliveAck& from);

  inline S2C_KeepAliveAck& operator=(const S2C_KeepAliveAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2C_KeepAliveAck& default_instance();

  void Swap(S2C_KeepAliveAck* other);

  // implements Message ----------------------------------------------

  inline S2C_KeepAliveAck* New() const { return New(NULL); }

  S2C_KeepAliveAck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2C_KeepAliveAck& from);
  void MergeFrom(const S2C_KeepAliveAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(S2C_KeepAliveAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = S2C_KEEP_ALIVE];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Uqee::Protobufs::Peer::Protocol::ProtocolType type() const;
  void set_type(::Uqee::Protobufs::Peer::Protocol::ProtocolType value);

  // @@protoc_insertion_point(class_scope:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();

  void InitAsDefaultInstance();
  static S2C_KeepAliveAck* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// C2S_KeepAliveReq

// optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = C2S_KEEP_ALIVE];
inline bool C2S_KeepAliveReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void C2S_KeepAliveReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void C2S_KeepAliveReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void C2S_KeepAliveReq::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Uqee::Protobufs::Peer::Protocol::ProtocolType C2S_KeepAliveReq::type() const {
  // @@protoc_insertion_point(field_get:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq.type)
  return static_cast< ::Uqee::Protobufs::Peer::Protocol::ProtocolType >(type_);
}
inline void C2S_KeepAliveReq::set_type(::Uqee::Protobufs::Peer::Protocol::ProtocolType value) {
  assert(::Uqee::Protobufs::Peer::Protocol::ProtocolType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq.type)
}

// -------------------------------------------------------------------

// S2C_KeepAliveAck

// optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = S2C_KEEP_ALIVE];
inline bool S2C_KeepAliveAck::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2C_KeepAliveAck::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2C_KeepAliveAck::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2C_KeepAliveAck::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::Uqee::Protobufs::Peer::Protocol::ProtocolType S2C_KeepAliveAck::type() const {
  // @@protoc_insertion_point(field_get:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck.type)
  return static_cast< ::Uqee::Protobufs::Peer::Protocol::ProtocolType >(type_);
}
inline void S2C_KeepAliveAck::set_type(::Uqee::Protobufs::Peer::Protocol::ProtocolType value) {
  assert(::Uqee::Protobufs::Peer::Protocol::ProtocolType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck.type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace Peer
}  // namespace Protobufs
}  // namespace Uqee

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Uqee::Protobufs::Peer::Protocol::RetCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Uqee::Protobufs::Peer::Protocol::RetCode>() {
  return ::Uqee::Protobufs::Peer::Protocol::RetCode_descriptor();
}
template <> struct is_proto_enum< ::Uqee::Protobufs::Peer::Protocol::ProtocolType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Uqee::Protobufs::Peer::Protocol::ProtocolType>() {
  return ::Uqee::Protobufs::Peer::Protocol::ProtocolType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2eproto__INCLUDED
