// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Uqee {
namespace Protobufs {
namespace Peer {
namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* C2S_KeepAliveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2S_KeepAliveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2C_KeepAliveAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2C_KeepAliveAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  C2S_KeepAliveReq_descriptor_ = file->message_type(0);
  static const int C2S_KeepAliveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_KeepAliveReq, type_),
  };
  C2S_KeepAliveReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      C2S_KeepAliveReq_descriptor_,
      C2S_KeepAliveReq::default_instance_,
      C2S_KeepAliveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_KeepAliveReq, _has_bits_[0]),
      -1,
      -1,
      sizeof(C2S_KeepAliveReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_KeepAliveReq, _internal_metadata_),
      -1);
  S2C_KeepAliveAck_descriptor_ = file->message_type(1);
  static const int S2C_KeepAliveAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_KeepAliveAck, type_),
  };
  S2C_KeepAliveAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      S2C_KeepAliveAck_descriptor_,
      S2C_KeepAliveAck::default_instance_,
      S2C_KeepAliveAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_KeepAliveAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(S2C_KeepAliveAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_KeepAliveAck, _internal_metadata_),
      -1);
  RetCode_descriptor_ = file->enum_type(0);
  ProtocolType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      C2S_KeepAliveReq_descriptor_, &C2S_KeepAliveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      S2C_KeepAliveAck_descriptor_, &S2C_KeepAliveAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete C2S_KeepAliveReq::default_instance_;
  delete C2S_KeepAliveReq_reflection_;
  delete S2C_KeepAliveAck::default_instance_;
  delete S2C_KeepAliveAck_reflection_;
}

void protobuf_AddDesc_test_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\022\034Uqee.Protobufs.Peer.Protoc"
    "ol\"\\\n\020C2S_KeepAliveReq\022H\n\004type\030\001 \001(\0162*.U"
    "qee.Protobufs.Peer.Protocol.ProtocolType"
    ":\016C2S_KEEP_ALIVE\"\\\n\020S2C_KeepAliveAck\022H\n\004"
    "type\030\001 \001(\0162*.Uqee.Protobufs.Peer.Protoco"
    "l.ProtocolType:\016S2C_KEEP_ALIVE*\257\001\n\007RetCo"
    "de\022\017\n\013RET_SUCCESS\020\000\022\023\n\017RET_PROTO_ERROR\020\001"
    "\022\016\n\nRET_DEPEND\020\002\022\022\n\016RET_NOT_ENOUGH\020\003\022\023\n\017"
    "RET_INPUT_ERROR\020\004\022\023\n\017RET_INNER_ERROR\020\005\022\r"
    "\n\tRET_EXIST\020\006\022\021\n\rRET_NOT_EXIST\020\007\022\016\n\nRET_"
    "PERMIT\020\010*\313\002\n\014ProtocolType\022\021\n\rC2S_ROOM_BA"
    "SE\020\000\022\022\n\016C2S_KEEP_ALIVE\020\001\022\022\n\016S2C_KEEP_ALI"
    "VE\020\002\022\021\n\rC2S_ALL_ROOMS\020\003\022\021\n\rS2C_ALL_ROOMS"
    "\020\004\022\023\n\017C2S_CREATE_ROOM\020e\022\023\n\017S2C_CREATE_RO"
    "OM\020f\022\024\n\020C2S_UPDATE_FRAME\020g\022\024\n\020S2C_UPDATE"
    "_FRAME\020h\022\020\n\014C2S_END_ROOM\020i\022\020\n\014S2C_END_RO"
    "OM\020j\022\r\n\tC2S_READY\020k\022\r\n\tS2C_READY\020l\022\025\n\020S2"
    "C_FRAME_NOTIFY\020\264\001\022\030\n\023S2C_END_ROOM_NOTIFY"
    "\020\265\001\022\021\n\014C2S_ROOM_TOP\020\310\001B\002H\001", 746);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  C2S_KeepAliveReq::default_instance_ = new C2S_KeepAliveReq();
  S2C_KeepAliveAck::default_instance_ = new S2C_KeepAliveAck();
  C2S_KeepAliveReq::default_instance_->InitAsDefaultInstance();
  S2C_KeepAliveAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;
const ::google::protobuf::EnumDescriptor* RetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetCode_descriptor_;
}
bool RetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolType_descriptor_;
}
bool ProtocolType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 180:
    case 181:
    case 200:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2S_KeepAliveReq::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2S_KeepAliveReq::C2S_KeepAliveReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
}

void C2S_KeepAliveReq::InitAsDefaultInstance() {
}

C2S_KeepAliveReq::C2S_KeepAliveReq(const C2S_KeepAliveReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
}

void C2S_KeepAliveReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2S_KeepAliveReq::~C2S_KeepAliveReq() {
  // @@protoc_insertion_point(destructor:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  SharedDtor();
}

void C2S_KeepAliveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2S_KeepAliveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_KeepAliveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2S_KeepAliveReq_descriptor_;
}

const C2S_KeepAliveReq& C2S_KeepAliveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

C2S_KeepAliveReq* C2S_KeepAliveReq::default_instance_ = NULL;

C2S_KeepAliveReq* C2S_KeepAliveReq::New(::google::protobuf::Arena* arena) const {
  C2S_KeepAliveReq* n = new C2S_KeepAliveReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2S_KeepAliveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool C2S_KeepAliveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = C2S_KEEP_ALIVE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Uqee::Protobufs::Peer::Protocol::ProtocolType_IsValid(value)) {
            set_type(static_cast< ::Uqee::Protobufs::Peer::Protocol::ProtocolType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  return false;
#undef DO_
}

void C2S_KeepAliveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  // optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = C2S_KEEP_ALIVE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
}

::google::protobuf::uint8* C2S_KeepAliveReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  // optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = C2S_KEEP_ALIVE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  return target;
}

int C2S_KeepAliveReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  int total_size = 0;

  // optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = C2S_KEEP_ALIVE];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_KeepAliveReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const C2S_KeepAliveReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const C2S_KeepAliveReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
    MergeFrom(*source);
  }
}

void C2S_KeepAliveReq::MergeFrom(const C2S_KeepAliveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void C2S_KeepAliveReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_KeepAliveReq::CopyFrom(const C2S_KeepAliveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_KeepAliveReq::IsInitialized() const {

  return true;
}

void C2S_KeepAliveReq::Swap(C2S_KeepAliveReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2S_KeepAliveReq::InternalSwap(C2S_KeepAliveReq* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2S_KeepAliveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2S_KeepAliveReq_descriptor_;
  metadata.reflection = C2S_KeepAliveReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2S_KeepAliveReq

// optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = C2S_KEEP_ALIVE];
bool C2S_KeepAliveReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void C2S_KeepAliveReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void C2S_KeepAliveReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void C2S_KeepAliveReq::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::Uqee::Protobufs::Peer::Protocol::ProtocolType C2S_KeepAliveReq::type() const {
  // @@protoc_insertion_point(field_get:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq.type)
  return static_cast< ::Uqee::Protobufs::Peer::Protocol::ProtocolType >(type_);
}
 void C2S_KeepAliveReq::set_type(::Uqee::Protobufs::Peer::Protocol::ProtocolType value) {
  assert(::Uqee::Protobufs::Peer::Protocol::ProtocolType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Uqee.Protobufs.Peer.Protocol.C2S_KeepAliveReq.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_KeepAliveAck::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_KeepAliveAck::S2C_KeepAliveAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
}

void S2C_KeepAliveAck::InitAsDefaultInstance() {
}

S2C_KeepAliveAck::S2C_KeepAliveAck(const S2C_KeepAliveAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
}

void S2C_KeepAliveAck::SharedCtor() {
  _cached_size_ = 0;
  type_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2C_KeepAliveAck::~S2C_KeepAliveAck() {
  // @@protoc_insertion_point(destructor:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  SharedDtor();
}

void S2C_KeepAliveAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2C_KeepAliveAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_KeepAliveAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2C_KeepAliveAck_descriptor_;
}

const S2C_KeepAliveAck& S2C_KeepAliveAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();
  return *default_instance_;
}

S2C_KeepAliveAck* S2C_KeepAliveAck::default_instance_ = NULL;

S2C_KeepAliveAck* S2C_KeepAliveAck::New(::google::protobuf::Arena* arena) const {
  S2C_KeepAliveAck* n = new S2C_KeepAliveAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_KeepAliveAck::Clear() {
// @@protoc_insertion_point(message_clear_start:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  type_ = 2;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool S2C_KeepAliveAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = S2C_KEEP_ALIVE];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Uqee::Protobufs::Peer::Protocol::ProtocolType_IsValid(value)) {
            set_type(static_cast< ::Uqee::Protobufs::Peer::Protocol::ProtocolType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  return false;
#undef DO_
}

void S2C_KeepAliveAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  // optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = S2C_KEEP_ALIVE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
}

::google::protobuf::uint8* S2C_KeepAliveAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  // optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = S2C_KEEP_ALIVE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  return target;
}

int S2C_KeepAliveAck::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  int total_size = 0;

  // optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = S2C_KEEP_ALIVE];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_KeepAliveAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const S2C_KeepAliveAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_KeepAliveAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
    MergeFrom(*source);
  }
}

void S2C_KeepAliveAck::MergeFrom(const S2C_KeepAliveAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void S2C_KeepAliveAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_KeepAliveAck::CopyFrom(const S2C_KeepAliveAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_KeepAliveAck::IsInitialized() const {

  return true;
}

void S2C_KeepAliveAck::Swap(S2C_KeepAliveAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_KeepAliveAck::InternalSwap(S2C_KeepAliveAck* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_KeepAliveAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2C_KeepAliveAck_descriptor_;
  metadata.reflection = S2C_KeepAliveAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_KeepAliveAck

// optional .Uqee.Protobufs.Peer.Protocol.ProtocolType type = 1 [default = S2C_KEEP_ALIVE];
bool S2C_KeepAliveAck::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void S2C_KeepAliveAck::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void S2C_KeepAliveAck::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void S2C_KeepAliveAck::clear_type() {
  type_ = 2;
  clear_has_type();
}
 ::Uqee::Protobufs::Peer::Protocol::ProtocolType S2C_KeepAliveAck::type() const {
  // @@protoc_insertion_point(field_get:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck.type)
  return static_cast< ::Uqee::Protobufs::Peer::Protocol::ProtocolType >(type_);
}
 void S2C_KeepAliveAck::set_type(::Uqee::Protobufs::Peer::Protocol::ProtocolType value) {
  assert(::Uqee::Protobufs::Peer::Protocol::ProtocolType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Uqee.Protobufs.Peer.Protocol.S2C_KeepAliveAck.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol
}  // namespace Peer
}  // namespace Protobufs
}  // namespace Uqee

// @@protoc_insertion_point(global_scope)
